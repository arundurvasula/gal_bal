initialize() { 
factor = 1000;
// get the correct recombination rate.
//reconmbination_rate = 
initializeMutationRate(3.8e-10 * factor); 
initializeMutationType("m1", 0.5, "f", 0.0); // neutral 

// gal7
initializeMutationType("m2", 0.5, "f", 0.1); // beneficial in p1 
initializeMutationType("m3", 0.5, "f", 0.1); // beneficial in p2 
initializeGenomicElementType("g1", c(m1), 1.0);
initializeGenomicElementType("g2", c(m1), 1.0); 
initializeGenomicElementType("g3", c(m1), 1.0); 
 
 
//. pgm1
initializeMutationType("m4", 0.5, "f", 0.1); // beneficial in p1 
initializeMutationType("m5", 0.5, "f", 0.1); // beneficial in p2 

// gal2
 
initializeMutationType("m6", 0.5, "f", 0.1); // beneficial in p1 
initializeMutationType("m7", 0.5, "f", 0.1); // beneficial in p2  
 
 
m2.convertToSubstitution = F;
m3.convertToSubstitution = F;
initializeGenomicElement(g1, 0, 20000); 

initializeGenomicElement(g2, 20001, 40000); 
initializeGenomicElement(g3, 40001, 60000); 

rates = c(rep(c(1e-7 * factor, 0.5),2),1e-7 * factor);
print(rates);
defineConstant("C", 10);
// number of QTLs
defineConstant("W", 1000);


ends = (repEach(c(10000,30000,50000) + 10000,2) +  rep(c(0,1), 3))[0:4];
print(ends);
initializeRecombinationRate(rates,ends);

} 
1 early() {
factor = 1000;
population_size = 1e6/factor;
print(population_size);
population_size = asInteger(population_size);

//population_size.as(int);
sim.addSubpop("p1", population_size); 
sim.addSubpop("p2", population_size); 

p1.setMigrationRates(p2, 0.001);
p2.setMigrationRates(p1, 0.001);
}
// recriprocal migration.
1 late() { 
	
	//sample(p1.genomes, 1000).addNewDrawnMutation(m3, 10000); // add A 
	
	//sample(p2, genomes,
	 n = size(p1.genomes);
	isPlus = asLogical(rbinom(n, 1, 0.01));
	print(isPlus);
 	p1.genomes[isPlus].addNewDrawnMutation(m3,10000);
 	p1.genomes[isPlus].addNewDrawnMutation(m5,30000);
 	p1.genomes[isPlus].addNewDrawnMutation(m7,50000);


	p1.genomes[!isPlus].addNewDrawnMutation(m2,10000);
 	p1.genomes[!isPlus].addNewDrawnMutation(m4,30000);
 	p1.genomes[!isPlus].addNewDrawnMutation(m6,50000);
 	
 	p2.genomes[!isPlus].addNewDrawnMutation(m3,10000);
 	p2.genomes[!isPlus].addNewDrawnMutation(m5,30000);
 	p2.genomes[!isPlus].addNewDrawnMutation(m7,50000);


	p2.genomes[isPlus].addNewDrawnMutation(m2,10000);
 	p2.genomes[isPlus].addNewDrawnMutation(m4,30000);
 	p2.genomes[isPlus].addNewDrawnMutation(m6,50000);

	
}


fitness(m2, p1) { 
	if (genome1.countOfMutationsOfType(m4)){
		if(genome1.countOfMutationsOfType(m6)){
			return 1.2;
		}
	}
	return 1.0;
} 
fitness(m2, p2) {
if (genome1.countOfMutationsOfType(m4)){
		if(genome1.countOfMutationsOfType(m6)){
			return 0.8;
		}
	}
	return 1.0;
} 



fitness(m3, p1) { 
if (genome1.countOfMutationsOfType(m5)){
		if(genome1.countOfMutationsOfType(m7)){
			return 0.8;
		}
	}
	return 1.0;
} 
fitness(m3, p2) { 
if (genome1.countOfMutationsOfType(m5)){
		if(genome1.countOfMutationsOfType(m7)){
			return 1.2;
		}
	}
	return 1.0; 
} 

fitness(m4, p1) { 
		if (genome1.countOfMutationsOfType(m2)){
		if(genome1.countOfMutationsOfType(m6)){
			return 1.2;
		}
		
	}
	return 1.0;


 } 
fitness(m4, p2) { 
	if (genome1.countOfMutationsOfType(m2)){
		if(genome1.countOfMutationsOfType(m6)){
			return 0.8;
		}
	}
	return 1.0; } 

fitness(m5, p1) { 
if (genome1.countOfMutationsOfType(m3)){
		if(genome1.countOfMutationsOfType(m7)){
			return 0.8;
		}
//	}if (genome1.countOfMutationsOfType(m2)){
	//		if(genome1.countOfMutationsOfType(m6)){
			//	return 0.4;
		//}
	}
	return 1.0;
} 
fitness(m5, p2) {
if (genome1.countOfMutationsOfType(m3)){
		if(genome1.countOfMutationsOfType(m7)){
			return 1.2;
		}
	}
	return 1.0;
 } 

fitness(m6, p1) { 
if (genome1.countOfMutationsOfType(m2)){
		if(genome1.countOfMutationsOfType(m4)){
			return 1.2;
		}
	}
	return 1.0;

 } 
fitness(m6, p2) { 

if (genome1.countOfMutationsOfType(m2)){
		if(genome1.countOfMutationsOfType(m4)){
			return 0.8;
		}
	}
	return 1.0;
 } 
fitness(m7, p1) {
	if (genome1.countOfMutationsOfType(m3)){
		if(genome1.countOfMutationsOfType(m5)){
			return 0.8;
		}
	}
	return 1.0;


 } 
fitness(m7, p2) { 

if (genome1.countOfMutationsOfType(m3)){
		if(genome1.countOfMutationsOfType(m5)){
			return 1.2;
		}
	}
	return 1.0;
 } 




100000 { sim.simulationFinished(); }
